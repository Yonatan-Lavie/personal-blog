{
  "openapi": "3.0.0",
  "info": {
    "title": "Blog Management API",
    "version": "1.0.0",
    "description": "APIs for managing blog posts, comments, and user authentication with email verification."
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/api/posts": {
      "get": {
        "tags": ["Posts"],
        "summary": "Get all posts with comments and pagination",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Posts"],
        "summary": "Save a new post with text and optional photo",
        "requestBody": {
          "description": "JSON object containing post text and optional photo data or URL.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Post created successfully."
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/posts/{postId}/like": {
      "post": {
        "tags": ["Posts"],
        "summary": "Add a like to a post by post ID",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of the post to add a like to.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Like added successfully."
          },
          "404": {
            "description": "Post not found."
          }
        }
      }
    },
    "/api/posts/{postId}/comments": {
      "get": {
        "tags": ["Posts"],
        "summary": "Get all comments related to a specific post by post ID.",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of the post to retrieve comments for.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Posts"],
        "summary": "Update a post with a new comment text, given post ID and user credentials.",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of the post to update.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object containing user credentials and the new comment text.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostWithComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Comment added successfully."
          },
          "404": {
            "description": "Post not found."
          }
        }
      }
    },
    "/api/comments/{commentId}/like": {
      "post": {
        "tags": ["Posts"],
        "summary": "Add a like to a comment by comment ID.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of the comment to add a like to.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Like added successfully."
          },
          "404": {
            "description": "Comment not found."
          }
        }
      }
    },
    "/api/users/{userId}/profile-photo": {
      "post": {
        "tags": ["Users"],
        "summary": "Save a user's profile photo.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to save the profile photo for.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Binary image data or URL to the profile photo.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "string"
                  }
                },
                "required": ["photo"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Profile photo saved successfully."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/api/auth/signup": {
      "post": {
        "tags": ["Users"],
        "summary": "Sign up a new user.",
        "requestBody": {
          "description": "JSON object containing user signup information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User signed up successfully."
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/auth/verify/{uniqueIdentifier}": {
      "get": {
        "tags": ["Users"],
        "summary": "Verify user email after signing up.",
        "parameters": [
          {
            "name": "uniqueIdentifier",
            "in": "path",
            "description": "The unique identifier sent in the email link.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Email verification successful."
          },
          "404": {
            "description": "Verification link not found or expired."
          }
        }
      }
    },
    "/api/auth/signin": {
      "post": {
        "tags": ["Users"],
        "summary": "Sign in and receive a JWT token in cookies.",
        "requestBody": {
          "description": "JSON object containing user credentials.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User signed in successfully. JWT token sent in cookies."
          },
          "401": {
            "description": "Unauthorized. Invalid credentials."
          }
        }
      }
    },
    "/api/auth/signout": {
      "get": {
        "tags": ["Users"],
        "summary": "Sign out and clear the JWT token from cookies.",
        "responses": {
          "200": {
            "description": "User signed out successfully. JWT token cleared from cookies."
          },
          "401": {
            "description": "Unauthorized. User not signed in."
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "tags": ["Users"],
        "summary": "Reset user password (for forgot password feature).",
        "requestBody": {
          "description": "JSON object containing user's email.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                },
                "required": ["email"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset email sent successfully."
          },
          "404": {
            "description": "User not found or invalid email."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PostWithComments": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "photo": {
            "type": "string"
          },
          "likes": {
            "type": "integer"
          },
          "userId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "likes": {
            "type": "integer"
          },
          "postId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NewPost": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "photo": {
            "type": "string"
          }
        },
        "required": ["text"]
      },
      "UserSignup": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "photo": {
            "type": "string"
          }
        },
        "required": ["firstName", "lastName", "email", "password", "username"]
      },
      "UpdatePostWithComment": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          }
        },
        "required": ["text"]
      },
      "UserCredentials": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["username", "password"]
      },
      "PostsResponse": {
        "type": "object",
        "properties": {
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostWithComments"
            }
          }
        }
      },
      "CommentsResponse": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Posts",
      "description": "APIs for managing blog posts and comments."
    },
    {
      "name": "Users",
      "description": "APIs for user authentication and management."
    }
  ]
}
